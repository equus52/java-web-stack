// environment settings
// called one time from root project

// available env list setting
ext {
  defaultDir = 'default'
  envRootName = 'environment'
  envList = []
}

allprojects {
  ext {
    getDependingProjects = {
      def set = new LinkedHashSet();
      project.configurations.compile.dependencies.withType(ProjectDependency).each {
        set.addAll(it.dependencyProject.getDependingAllProjects())
      }
      return set
    }
    
    getDependingAllProjects = {
      def set = new LinkedHashSet();
      set.addAll(project.getDependingProjects())
      set.add(project)
      return set
    }

    // find effective environment list
    // if nothing, return "default"
    findEffectiveEnvList = {
      def set = new LinkedHashSet();
      envList.each { envName ->
        def exists = false
        project.getDependingAllProjects().each { dependingProject ->
          def envDir = new File("${rootProject.buildDir}/${envRootName}/${envName}/${dependingProject.name}")
          if(envDir.isDirectory()){
            exists = true
          }
        }
        if (exists) {
          set.add(envName)
        }
      }
      if (set.size() < envList.size()) {
        set.add(defaultDir)
      }
      return set
    }
  }
}

file(envRootName).listFiles().each { file ->
def envName = file.name
if (envName == defaultDir) {
  return
}
if (envName.startsWith('.')) {
  return
}
envList +=[envName]
}
def confFileName = 'configuration.properties'

// exclude files
ext { excludeFiles = [confFileName]}
excludeFiles += ['**/*.groovy']

// environment config task
task environmentConfig() << {

  subprojects.each { project ->
    copy {
      from("${project.projectDir.getAbsolutePath()}/${mainConfigPath}")
      into("${buildDir}/${envRootName}/${defaultDir}/${project.name}")
    }
  }
  copy {
    from("${envRootName}/${defaultDir}")
    into("${buildDir}/${envRootName}/${defaultDir}")
  }

  envList.each { envName ->

    def tmpDir = "${buildDir}/tmp/${envRootName}"

    subprojects.each { project ->
      def envProjectDir = new File("${envRootName}/${envName}/${project.name}")
      if (!envProjectDir.isDirectory()) {
        return
      }
      def tmpEnvProjectDir = new File("${tmpDir}/${envName}/${project.name}")
      copy {
        from("${envRootName}/${defaultDir}/${project.name}")
        into(tmpEnvProjectDir)
      }
      copy {
        from(envProjectDir)
        into(tmpEnvProjectDir)
      }

      def buildEnvProjectDir = new File("${buildDir}/${envRootName}/${envName}/${project.name}")
      copy {
        from(tmpEnvProjectDir)
        into(buildEnvProjectDir)
        exclude confFileName
      }

      def confFile = new File("${tmpDir}/${envName}/${project.name}/${confFileName}")
      if (confFile.isFile()) {
        def props = new Properties()
        confFile.withInputStream { stream ->
          props.load(stream)
        }
        copy {
          from(tmpEnvProjectDir)
          into(buildEnvProjectDir)
          exclude excludeFiles
          expand(props)
        }
      }
    }
  }
}

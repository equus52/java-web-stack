apply plugin: 'java'
apply plugin: 'eclipse'

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }
javadoc { options.encoding = defaultEncoding }

task wrapper(type: Wrapper) { gradleVersion = '1.12' }

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

eclipse.project { name project.name }

jar {
  manifest {
    attributes(
        "Implementation-Title"      : project.name,
        "Implementation-Version"    : productVersion
        )
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource

  manifest {
    attributes(
        "Implementation-Title"      : project.name,
        "Implementation-Version"    : productVersion
        )
  }
}
artifacts { archives sourcesJar }

dependencies {
  compile fileTree(dir: 'lib/compile', include: '**/*.jar', exclude: '**/*-sources.jar')
  runtime fileTree(dir: 'lib/runtime', include: '**/*.jar', exclude: '**/*-sources.jar')
  testCompile fileTree(dir: 'lib/testCompile', include: '**/*.jar', exclude: '**/*-sources.jar')
}

eclipse {
  pathVariables 'GRADLE_USER_HOME': gradle.gradleUserHomeDir

  classpath.file {
    whenMerged { classpath ->
      classpath.entries.findAll { it.kind == 'lib' }.each { lib ->
        def baseDir = project.projectDir.getAbsolutePath().replace('\\', '/')
        if (lib.path.startsWith(baseDir)) {
          lib.path = lib.path.replace(baseDir, ".")
        }
      }
    }
  }
}

task makeSourceDirs {
  def sources = [
    sourceSets.main,
    sourceSets.test
  ]
  sources*.allSource*.srcDirs.flatten().each { File srcDir ->
    if (!srcDir.isDirectory()) {
      println "making $srcDir"
      srcDir.mkdirs()
    }
  }
}
eclipseClasspath.dependsOn makeSourceDirs

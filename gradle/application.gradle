// called from each project applying application plugin
apply plugin: 'application'

// main class setting
mainClassName = app_mainClassName

// each environment distZip task
task eachDistZip (dependsOn: [jar, startScripts]) << {
  project.findEffectiveEnvList().each { envName ->
    task("${envName}DistZip", type: Zip) {

      into('bin') { from startScripts.outputDir }
      into('lib') {
        from jar.archivePath
        from configurations.runtime
      }

      // zip name setting
      baseName = app_baseName
      if (!envName.equals(defaultDir)) {
        // if default, no prefix
        appendix = envName
      }

      // include environment config setting
      project.getDependingAllProjects().each { project ->
        into('config') {
          from "${rootProject.buildDir}/${envRootName}/${defaultDir}/${project.name}"
          include '**/*'
        }
      }
      if (!envName.equals(defaultDir)) {
        into('config') {
          from "${rootProject.buildDir}/${envRootName}/${envName}/${project.name}"
          include '**/*'
        }
      }
    }.execute()
  }
}
// distZip execute on build task
build.dependsOn eachDistZip

// force overwrite because not work in what follows
// startScripts.classpath.add(files('$APP_HOME/config'))
startScripts << {
  unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/config/:$APP_HOME/lib')
  windowsScript.text = windowsScript.text.replaceFirst(/set CLASSPATH=%APP_HOME%.*/, 'set CLASSPATH=%APP_HOME%/config/;%APP_HOME%/lib/*')
}
